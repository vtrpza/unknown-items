// UNKNOWN ITEMS Database Schema
// Based on the architecture specifications

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  username      String    @unique @db.VarChar(30)
  email         String    @unique
  emailVerified DateTime?
  passwordHash  String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  profile       Profile?
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  commentLikes  CommentLike[]
  bookmarks     Bookmark[]
  following     Follow[]      @relation("following")
  followers     Follow[]      @relation("followers")
  notifications Notification[]
  reports       Report[]
  media         Media[]

  // NextAuth.js requirements
  accounts Account[]
  sessions Session[]

  @@index([username])
  @@index([email])
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

model Profile {
  id           String   @id @default(cuid())
  userId       String   @unique
  displayName  String?
  bio          String?  @db.Text
  avatar       String?
  coverImage   String?
  location     String?
  website      String?
  interests    String[]
  mysteryScore Int      @default(0)
  verified     Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Content Management
model Post {
  id            String        @id @default(cuid())
  title         String        @db.VarChar(200)
  content       String        @db.Text
  contentType   ContentType
  category      Category
  authorId      String
  published     Boolean       @default(true)
  featured      Boolean       @default(false)
  views         Int           @default(0)
  mysteryStatus MysteryStatus @default(UNSOLVED)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  media     Media[]
  tags      PostTag[]
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]
  reports   Report[]

  @@index([authorId])
  @@index([category])
  @@index([createdAt])
  @@index([mysteryStatus])
}

enum ContentType {
  TEXT
  IMAGE
  VIDEO
  LINK
  MIXED
}

enum Category {
  UNKNOWN_FACTS
  INTERNET_MYSTERIES
  UNIDENTIFIED_OBJECTS
  UNEXPLAINED_EVENTS
  HISTORICAL_MYSTERIES
  SCIENTIFIC_ANOMALIES
  CRYPTIDS
  CONSPIRACIES
  OTHER
}

enum MysteryStatus {
  UNSOLVED
  PARTIALLY_SOLVED
  SOLVED
  DEBUNKED
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique @db.VarChar(50)
  slug        String    @unique @db.VarChar(50)
  description String?
  usageCount  Int       @default(0)

  posts PostTag[]

  @@index([slug])
  @@index([usageCount])
}

model PostTag {
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

// Interactions
model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  authorId  String
  postId    String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  
  replies Comment[]     @relation("CommentReplies")
  likes   CommentLike[]

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// Media & Files
model Media {
  id           String    @id @default(cuid())
  url          String
  thumbnailUrl String?
  type         MediaType
  size         Int
  width        Int?
  height       Int?
  duration     Int? // For videos
  postId       String?
  uploaderId   String
  createdAt    DateTime  @default(now())

  post     Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  uploader User  @relation(fields: [uploaderId], references: [id])

  @@index([postId])
  @@index([uploaderId])
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

// Notifications
model Notification {
  id       String           @id @default(cuid())
  userId   String
  type     NotificationType
  title    String
  message  String
  entityId String? // ID of related entity (post, comment, etc.)
  read     Boolean          @default(false)
  createdAt DateTime        @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt])
}

enum NotificationType {
  NEW_FOLLOWER
  POST_LIKE
  POST_COMMENT
  COMMENT_REPLY
  MENTION
  MYSTERY_SOLVED
  TRENDING_POST
}

// Moderation
model Report {
  id          String           @id @default(cuid())
  reporterId  String
  targetType  ReportTargetType
  targetId    String
  reason      ReportReason
  description String?          @db.Text
  status      ReportStatus     @default(PENDING)
  resolvedAt  DateTime?
  resolvedBy  String?
  createdAt   DateTime         @default(now())

  reporter User  @relation(fields: [reporterId], references: [id])
  post     Post? @relation(fields: [targetId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([targetType, targetId])
}

enum ReportTargetType {
  POST
  COMMENT
  USER
}

enum ReportReason {
  SPAM
  HARASSMENT
  MISINFORMATION
  INAPPROPRIATE_CONTENT
  COPYRIGHT
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWING
  RESOLVED
  DISMISSED
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
